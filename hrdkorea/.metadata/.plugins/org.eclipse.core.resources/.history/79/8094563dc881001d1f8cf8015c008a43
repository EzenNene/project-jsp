package DAO;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import DTO.Member;
import DTO.Party;
import DTO.Vote;

public class VoteDAO {

	Connection conn = null; // DB와 연결 하기 위한 객체
	PreparedStatement ps = null; // 매개변수가 포함된 sql문을 DB에 전달하기 위한 객체
	ResultSet rs = null; // select 문을 사용한 쿼리 성공시 결과물로 반환하기위한 객체

	// 데이터베이스 연결
	public static Connection getConnection() throws Exception {
		Class.forName("oracle.jdbc.OracleDriver"); // 매개변수로 들어가는 드라이버를 찾는다
		Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "system", "sys1234");

		return con;
	}

	// 투표하기
	public String vote(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		String v_jumin = request.getParameter("v_jumin");
		String v_name = request.getParameter("v_name");
		String m_no = request.getParameter("m_no");
		String v_time = request.getParameter("v_time");
		String v_area = request.getParameter("v_area");
		String v_confirm = request.getParameter("v_confirm");

		int result = 0;

		try {
			conn = getConnection(); // DB연결
			String sql = "insert into tbl_vote_202005 values(?,?,?,?,?,?)";
			
			ps = conn.prepareStatement(sql); // sql문을 DB에 전달
			ps.setString(1, v_jumin); // setString (인덱스, 필드에 저장할 데이터값)
			ps.setString(2, v_name);
			ps.setString(3, m_no);
			ps.setString(4, v_time);
			ps.setString(5, v_area);
			ps.setString(6, v_confirm);

			// insert, update, delete: 성공한 레코드의 갯수를 반환.
			result = ps.executeUpdate();

			System.out.println(result);

			conn.close();
			ps.close();

		} catch (Exception e) {
			e.printStackTrace();
		}

		return "vote.jsp";

	}

	// 후보조회
	public String search(HttpServletRequest request, HttpServletResponse response) {
		ArrayList<Member> list = new ArrayList<Member>();
		try {
			conn = getConnection();
			// 후보자 리스트 가져오기
			String sql = "SELECT M.m_no, M.m_name, P.p_name, DECODE (M.p_school, '1', '고졸', '2', '학사', '3', '석사', '4', '박사') p_school, ";
			sql += "substr(M.m_jumin,1,6)||'-'||substr(M.m_jumin,7) m_jumin, ";
			sql += "M.m_city, substr(P.p_tel1,1,2)||'-'||P.p_tel2||'-'||(substr(P.p_tel3,4)||substr(P.p_tel3,4)||substr(P.p_tel3,4)||substr(P.p_tel3,4)) p_tel ";
			sql += "FROM tbl_member_202005 M, tbl_party_202005 P where M.p_code = P.p_code";
			
			ps = conn.prepareStatement(sql); // DB에 sql(select 구문) 전달
			rs = ps.executeQuery();	// select 구문 실행
			
			/*
			 * ResultSet 객체는 커서(Cursor)를 갖고 있는데, 
			 * 이를 통해 특정 행에 대한 참조를 조작할 수 있다. 
			 * 커서는 초기에는 첫번째 행의 직전을 가리키며, 
			 * next() 메소드를 사용하여 다음 위치로 커서를 옮길 수 있다. 
			 */

			while (rs.next()) {
				Member member = new Member();

				member.setM_no(rs.getString(1));
				member.setM_name(rs.getString(2));
				member.setP_code(rs.getString(3));
				member.setP_school(rs.getString(4));
				member.setM_jumin(rs.getString(5));
				member.setM_city(rs.getString(6));
				member.setP_tel(rs.getString(7));
				
				list.add(member);
			}
			
			request.setAttribute("list", list);
			
			conn.close();
			ps.close();
			rs.close();

		} catch (Exception e) {
			e.printStackTrace();
		}
		return "search.jsp";
	}

	// 투표자조회
		public String result(HttpServletRequest request, HttpServletResponse response) {
			ArrayList<Vote> list = new ArrayList<Vote>();
			try {
				conn = getConnection();
				// 후보자 리스트 가져오기
				String sql = "SELECT V.v_name, to_char(V.v_jumin, 'YY년 MM월'), V.v_jumin, V.v_jumin, M.m_no, V.v_time, V.v_confirm ";
				sql += "";
				sql += "FROM tbl_vote_202005 V, tbl_member_202005 M where V.m_no = M.m_no";
				sql += "";
				
				ps = conn.prepareStatement(sql); // DB에 sql(select 구문) 전달
				rs = ps.executeQuery();	// select 구문 실행
				
				/*
				 * ResultSet 객체는 커서(Cursor)를 갖고 있는데, 
				 * 이를 통해 특정 행에 대한 참조를 조작할 수 있다. 
				 * 커서는 초기에는 첫번째 행의 직전을 가리키며, 
				 * next() 메소드를 사용하여 다음 위치로 커서를 옮길 수 있다. 
				 */

				while (rs.next()) {
					Vote vote= new Vote();

					vote.setV_name(rs.getString(1));
					vote.setV_birth(rs.getString(2));
					vote.setV_age(rs.getString(3));
					vote.setV_gender(rs.getString(4));
					vote.setM_no(rs.getString(5));
					vote.setV_time(rs.getString(6));
					vote.setV_confirm(rs.getString(7));
					
					list.add(vote);
				}
				
				request.setAttribute("list", list);
				
				conn.close();
				ps.close();
				rs.close();

			} catch (Exception e) {
				e.printStackTrace();
			}
			return "result.jsp";
		}
	
}
